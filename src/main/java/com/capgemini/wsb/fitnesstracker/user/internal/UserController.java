package com.capgemini.wsb.fitnesstracker.user.internal;

import com.capgemini.wsb.fitnesstracker.user.api.User;
import com.capgemini.wsb.fitnesstracker.user.api.UserNotFoundException;
import lombok.RequiredArgsConstructor;
import lombok.extern.java.Log;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.util.List;

@RestController
@RequestMapping("/v1/users")
@RequiredArgsConstructor
class UserController {

    private final UserServiceImpl userService;

    private final UserMapper userMapper;

    /**
     * Returns all users.
     *
     * @return A list of all users
     */
    @GetMapping
    public List<UserDto> getAllUsers() {
        return userService.findAllUsers()
                          .stream()
                          .map(userMapper::toDto)
                          .toList();
    }

    /**
     * Adds a new user.
     *
     * @param userDto The user data
     * @return The added user
     */
    @PostMapping
    public User addUser(@RequestBody UserDto userDto) throws InterruptedException {
        var user = userService.createUser(userMapper.toEntity(userDto));
        return user;
    }

    /**
     * Returns all users in a simplified form.
     *
     * @return A list of users in a simplified form
     */
    @GetMapping("/simple")
    public List<UserSimpleDto> getAllSimpleUser() {
        return userService.findAllUsers()
                          .stream()
                          .map(userMapper::toSimpleDto)
                          .toList();
    }

    /**
     * Returns a user with the given ID.
     * If the user with the given ID is not found, then {@link UserNotFoundException} will be thrown.
     *
     * @param id The ID of the user to be returned
     * @return The user with the given ID
     */
    @GetMapping("/{id}")
    public UserDto getUserById(@PathVariable Long id) {
        var user = userService.getUser(id);
        if(user.isEmpty()) {
            throw new UserNotFoundException(id);
        }
        return userMapper.toDto(user.get());
    }

    /**
     * Deletes a user with the given ID.
     * If the user with the given ID is not found, then {@link UserNotFoundException} will be thrown.
     *
     * @param id The ID of the user to be deleted
     */
    @DeleteMapping("/{id}")
    public void deleteUser(@PathVariable Long id) {
        // This won't delete autogenerated users (1 <= id <= 10), idk why...
        userService.deleteUser(id);
    }

    /**
     * Returns all users with an email that contains the given email fragment.
     *
     * @param email The email fragment to search for
     * @return A list of users with an email that contains the given email fragment
     */
    @GetMapping("/email")
    public List<UserEmailDto> getAllEmailsCorrelations(@RequestParam String email) {
        // This check is not required, but should throw as this is meant to look for users by email,
        // not to return all user emails.
        if (email == null || email.isBlank()) {
            throw new ResponseStatusException(
                    HttpStatus.BAD_REQUEST,
                    "Parameter (email) must be provided"
            );
        }
        return userService.findAllUsersByEmailCorrelation(email)
                          .stream()
                          .map(userMapper::toEmailDto)
                          .toList();
    }

    /**
     * Returns all users older than the given age.
     *
     * @param age The age to compare with
     * @return A list of users older than the given age
     */
    @GetMapping("/older/{age}")
    public List<UserDto> getAllUsersOlderThan(@PathVariable int age) {
        return userService.findAllUsersOlderThan(age)
                          .stream()
                          .map(userMapper::toDto)
                          .toList();
    }

    /**
     * Updates a user with the given ID.
     * If the user with the given ID is not found, then {@link UserNotFoundException} will be thrown.
     *
     * @param id The ID of the user to be updated
     * @param updatedUserDto The updated user data
     * @return The updated user
     */
    @PutMapping("/{id}")
    public UserDto updateUser(@PathVariable Long id, @RequestBody UserDto updatedUserDto) {
        User user = userService.getUser(id).orElseThrow(() -> new UserNotFoundException(id));
        return userMapper.toDto(userService.updateUser(userMapper.toUpdatedEntity(id, updatedUserDto)));
    }
}